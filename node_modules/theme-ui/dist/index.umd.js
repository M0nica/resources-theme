(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@theme-ui/core'), require('@theme-ui/color-modes'), require('@theme-ui/mdx'), require('@theme-ui/theme-provider'), require('@theme-ui/components'), require('@theme-ui/css')) :
  typeof define === 'function' && define.amd ? define(['exports', '@theme-ui/core', '@theme-ui/color-modes', '@theme-ui/mdx', '@theme-ui/theme-provider', '@theme-ui/components', '@theme-ui/css'], factory) :
  (factory((global.themeUi = {}),global.core,global.colorModes,global.mdx,global.themeProvider,global.components,global.css));
}(this, (function (exports,core,colorModes,mdx,themeProvider,components,css) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var BaseStyles = function BaseStyles(props) {
    return core.jsx('div', _objectSpread2({}, props, {
      sx: {
        fontFamily: 'body',
        lineHeight: 'body',
        fontWeight: 'body',
        variant: 'styles'
      }
    }));
  };

  Object.keys(components).forEach(function (key) { exports[key] = components[key]; });
  exports.jsx = core.jsx;
  exports.Context = core.Context;
  exports.merge = core.merge;
  exports.useThemeUI = core.useThemeUI;
  exports.useColorMode = colorModes.useColorMode;
  exports.InitializeColorMode = colorModes.InitializeColorMode;
  exports.Styled = mdx.Styled;
  exports.components = mdx.components;
  exports.ThemeProvider = themeProvider.ThemeProvider;
  exports.css = css.css;
  exports.get = css.get;
  exports.BaseStyles = BaseStyles;

})));
//# sourceMappingURL=index.umd.js.map
