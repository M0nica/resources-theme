var core = require('@theme-ui/core');
var colorModes = require('@theme-ui/color-modes');
var mdx = require('@theme-ui/mdx');
var themeProvider = require('@theme-ui/theme-provider');
var components = require('@theme-ui/components');
var css = require('@theme-ui/css');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var BaseStyles = function BaseStyles(props) {
  return core.jsx('div', _objectSpread2({}, props, {
    sx: {
      fontFamily: 'body',
      lineHeight: 'body',
      fontWeight: 'body',
      variant: 'styles'
    }
  }));
};

Object.keys(components).forEach(function (key) { exports[key] = components[key]; });
exports.jsx = core.jsx;
exports.Context = core.Context;
exports.merge = core.merge;
exports.useThemeUI = core.useThemeUI;
exports.useColorMode = colorModes.useColorMode;
exports.InitializeColorMode = colorModes.InitializeColorMode;
exports.Styled = mdx.Styled;
exports.components = mdx.components;
exports.ThemeProvider = themeProvider.ThemeProvider;
exports.css = css.css;
exports.get = css.get;
exports.BaseStyles = BaseStyles;
//# sourceMappingURL=index.js.map
